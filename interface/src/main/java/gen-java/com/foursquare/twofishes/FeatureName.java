/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.foursquare.twofishes;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class FeatureName implements TBase<FeatureName, FeatureName._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("FeatureName");

  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);
  private static final TField LANG_FIELD_DESC = new TField("lang", TType.STRING, (short)2);
  private static final TField FLAGS_FIELD_DESC = new TField("flags", TType.LIST, (short)3);
  private static final TField HIGHLIGHTED_NAME_FIELD_DESC = new TField("highlightedName", TType.STRING, (short)4);

  public String name;
  public String lang;
  public List<FeatureNameFlags> flags;
  public String highlightedName;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    NAME((short)1, "name"),
    LANG((short)2, "lang"),
    FLAGS((short)3, "flags"),
    HIGHLIGHTED_NAME((short)4, "highlightedName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // LANG
          return LANG;
        case 3: // FLAGS
          return FLAGS;
        case 4: // HIGHLIGHTED_NAME
          return HIGHLIGHTED_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LANG, new FieldMetaData("lang", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.FLAGS, new FieldMetaData("flags", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new EnumMetaData(TType.ENUM, FeatureNameFlags.class))));
    tmpMap.put(_Fields.HIGHLIGHTED_NAME, new FieldMetaData("highlightedName", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(FeatureName.class, metaDataMap);
  }

  public FeatureName() {
    this.flags = new ArrayList<FeatureNameFlags>();

  }

  public FeatureName(
    String name,
    String lang)
  {
    this();
    this.name = name;
    this.lang = lang;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FeatureName(FeatureName other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetLang()) {
      this.lang = other.lang;
    }
    if (other.isSetFlags()) {
      List<FeatureNameFlags> __this__flags = new ArrayList<FeatureNameFlags>();
      for (FeatureNameFlags other_element : other.flags) {
        __this__flags.add(other_element);
      }
      this.flags = __this__flags;
    }
    if (other.isSetHighlightedName()) {
      this.highlightedName = other.highlightedName;
    }
  }

  public FeatureName deepCopy() {
    return new FeatureName(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.lang = null;
    this.flags = new ArrayList<FeatureNameFlags>();

    this.highlightedName = null;
  }

  public String getName() {
    return this.name;
  }

  public FeatureName setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getLang() {
    return this.lang;
  }

  public FeatureName setLang(String lang) {
    this.lang = lang;
    return this;
  }

  public void unsetLang() {
    this.lang = null;
  }

  /** Returns true if field lang is set (has been asigned a value) and false otherwise */
  public boolean isSetLang() {
    return this.lang != null;
  }

  public void setLangIsSet(boolean value) {
    if (!value) {
      this.lang = null;
    }
  }

  public int getFlagsSize() {
    return (this.flags == null) ? 0 : this.flags.size();
  }

  public java.util.Iterator<FeatureNameFlags> getFlagsIterator() {
    return (this.flags == null) ? null : this.flags.iterator();
  }

  public void addToFlags(FeatureNameFlags elem) {
    if (this.flags == null) {
      this.flags = new ArrayList<FeatureNameFlags>();
    }
    this.flags.add(elem);
  }

  public List<FeatureNameFlags> getFlags() {
    return this.flags;
  }

  public FeatureName setFlags(List<FeatureNameFlags> flags) {
    this.flags = flags;
    return this;
  }

  public void unsetFlags() {
    this.flags = null;
  }

  /** Returns true if field flags is set (has been asigned a value) and false otherwise */
  public boolean isSetFlags() {
    return this.flags != null;
  }

  public void setFlagsIsSet(boolean value) {
    if (!value) {
      this.flags = null;
    }
  }

  public String getHighlightedName() {
    return this.highlightedName;
  }

  public FeatureName setHighlightedName(String highlightedName) {
    this.highlightedName = highlightedName;
    return this;
  }

  public void unsetHighlightedName() {
    this.highlightedName = null;
  }

  /** Returns true if field highlightedName is set (has been asigned a value) and false otherwise */
  public boolean isSetHighlightedName() {
    return this.highlightedName != null;
  }

  public void setHighlightedNameIsSet(boolean value) {
    if (!value) {
      this.highlightedName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case LANG:
      if (value == null) {
        unsetLang();
      } else {
        setLang((String)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((List<FeatureNameFlags>)value);
      }
      break;

    case HIGHLIGHTED_NAME:
      if (value == null) {
        unsetHighlightedName();
      } else {
        setHighlightedName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case LANG:
      return getLang();

    case FLAGS:
      return getFlags();

    case HIGHLIGHTED_NAME:
      return getHighlightedName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case LANG:
      return isSetLang();
    case FLAGS:
      return isSetFlags();
    case HIGHLIGHTED_NAME:
      return isSetHighlightedName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FeatureName)
      return this.equals((FeatureName)that);
    return false;
  }

  public boolean equals(FeatureName that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_lang = true && this.isSetLang();
    boolean that_present_lang = true && that.isSetLang();
    if (this_present_lang || that_present_lang) {
      if (!(this_present_lang && that_present_lang))
        return false;
      if (!this.lang.equals(that.lang))
        return false;
    }

    boolean this_present_flags = true && this.isSetFlags();
    boolean that_present_flags = true && that.isSetFlags();
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (!this.flags.equals(that.flags))
        return false;
    }

    boolean this_present_highlightedName = true && this.isSetHighlightedName();
    boolean that_present_highlightedName = true && that.isSetHighlightedName();
    if (this_present_highlightedName || that_present_highlightedName) {
      if (!(this_present_highlightedName && that_present_highlightedName))
        return false;
      if (!this.highlightedName.equals(that.highlightedName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FeatureName other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FeatureName typedOther = (FeatureName)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLang()).compareTo(typedOther.isSetLang());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLang()) {
      lastComparison = TBaseHelper.compareTo(this.lang, typedOther.lang);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlags()).compareTo(typedOther.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = TBaseHelper.compareTo(this.flags, typedOther.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighlightedName()).compareTo(typedOther.isSetHighlightedName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighlightedName()) {
      lastComparison = TBaseHelper.compareTo(this.highlightedName, typedOther.highlightedName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // LANG
          if (field.type == TType.STRING) {
            this.lang = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // FLAGS
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.flags = new ArrayList<FeatureNameFlags>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                FeatureNameFlags _elem2;
                _elem2 = FeatureNameFlags.findByValue(iprot.readI32());
                this.flags.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // HIGHLIGHTED_NAME
          if (field.type == TType.STRING) {
            this.highlightedName = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.lang != null) {
      oprot.writeFieldBegin(LANG_FIELD_DESC);
      oprot.writeString(this.lang);
      oprot.writeFieldEnd();
    }
    if (this.flags != null) {
      if (isSetFlags()) {
        oprot.writeFieldBegin(FLAGS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.flags.size()));
          for (FeatureNameFlags _iter3 : this.flags)
          {
            oprot.writeI32(_iter3.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.highlightedName != null) {
      if (isSetHighlightedName()) {
        oprot.writeFieldBegin(HIGHLIGHTED_NAME_FIELD_DESC);
        oprot.writeString(this.highlightedName);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FeatureName(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lang:");
    if (this.lang == null) {
      sb.append("null");
    } else {
      sb.append(this.lang);
    }
    first = false;
    if (isSetFlags()) {
      if (!first) sb.append(", ");
      sb.append("flags:");
      if (this.flags == null) {
        sb.append("null");
      } else {
        sb.append(this.flags);
      }
      first = false;
    }
    if (isSetHighlightedName()) {
      if (!first) sb.append(", ");
      sb.append("highlightedName:");
      if (this.highlightedName == null) {
        sb.append("null");
      } else {
        sb.append(this.highlightedName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

